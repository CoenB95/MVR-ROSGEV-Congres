<launch>
  <arg name="localization" default="false"/>
  <arg name="map" default="false"/>
  <arg name="planning" default="false"/>
  <arg name="robot" default="false"/>
  <arg name="simulated" default="true"/>
  <arg name="vision" default="false"/>

  <!-- Use simulated time to prevent TF problems (untested on real robot) -->
  <param name ="/use_sim_time" value="true"/>

  <!-- RAVG -->
  <group ns="ravg">
    <!-- Vision -->
    <group if="$(arg vision)" ns="vision">
      <!-- Realsense -->
      <include file="$(find realsense2_camera)/launch/rs_camera.launch">
        <arg name="align_depth" value="true" />
      </include>
    </group>

    <!-- Robot -->
    <group if="$(arg robot)" ns="robot">
      <!-- Simulated (Pioneer3-DX via Gazebo) -->
      <group if="$(arg simulated)">
        <include file="$(find amr_robots_gazebo)/example-world.launch">
          <arg name="world" value="$(find amr_robots_gazebo)/empty.world"/>
        </include>
        <include file="$(find amr_robots_gazebo)/spawn.launch">
          <arg name="urdf" value="$(find amr_robots_description)/urdf/pioneer3dx.urdf"/>
          <arg name="namespace" value="/ravg/robot/gazebo"/>
        </include>
      </group>

      <!-- Real (RosAria) -->
      <group unless="$(arg simulated)">
        <node pkg="rosaria" type="RosAria" name="rosaria"/>
      </group>
    </group>

    <!-- Mapping/Localization/Visualization -->
    <group if="$(arg map)" ns="map">
      <!-- TF: Attach Camera to Robot -->
	    <node pkg="tf" type="static_transform_publisher" name="base_to_cam" args="0.01 0.06 0.90 0 0.37 0 base_link camera_link 100" />
    
      <!-- Rtabmap -->
      <include file="$(find rtabmap_ros)/launch/rtabmap.launch">
        <arg unless="$(arg localization)" name="args" value="--delete_db_on_start"/> -->
        <arg name="odom_frame_id" value="odom"/> <!-- TF: link rtabmap's 'map' to 'odom' -->
        <arg name="frame_id" value="base_link"/> <!-- TF: link 'odom' to 'base_link' -->
        <arg name="depth_topic" value="/ravg/vision/camera/aligned_depth_to_color/image_raw"/>
        <arg name="rgb_topic" value="/ravg/vision/camera/color/image_raw"/>
        <arg name="camera_info_topic" value="/ravg/vision/camera/color/camera_info"/>
        <arg name="approx_sync" value="false"/>
        <arg name="localization" value="$(arg localization)"/>
        <arg name="wait_for_transform" value="0.5"/>
        <!-- <arg name="rviz" value="true"/> -->
      </include>
    </group>

    <!-- Navigation/Planning -->
    <group if="$(arg planning)" ns="planning">
      <!-- Nodelet Manager -->
      <node pkg="nodelet" type="nodelet" name="nodelet_manager"  args="manager"/>

      <!-- Nodelet: Create Pointcloud from DepthImage -->
		  <node pkg="nodelet" type="nodelet" name="depth_to_cloud_nodelet" args="load rtabmap_ros/point_cloud_xyz nodelet_manager">
			  <remap from="depth/image" to="/ravg/vision/camera/aligned_depth_to_color/image_raw"/>
			  <remap from="depth/camera_info" to="/ravg/vision/camera/depth/camera_info"/>
			  <remap from="cloud" to="cloud_xyz"/> <!-- /ravg/planning/cloud_xyz -->
			
			  <param name="voxel_size" type="double" value="0.05"/>
			  <param name="decimation" type="int" value="4"/>
			  <param name="max_depth" type="double" value="4"/>
		  </node>

      <!-- Nodelet: Create Obstaclecloud from Pointcloud -->
      <node pkg="nodelet" type="nodelet" name="cloud_to_obstacles_nodelet" args="load rtabmap_ros/obstacles_detection nodelet_manager">
    	  <remap from="cloud" to="cloud_xyz"/> <!-- ravg/planning/cloud_xyz -->
			  <remap from="obstacles" to="obstacle_cloud"/> <!-- ravg/planning/obstacle_cloud -->

			  <param name="frame_id" type="string" value="base_link"/>		
			  <param name="map_frame_id" type="string" value="map"/>
			  <param name="wait_for_transform" type="bool" value="true"/>
			  <param name="min_cluster_size" type="int" value="20"/>
			  <param name="max_obstacles_height" type="double" value="0.0"/>
  	  </node>
    
      <!-- MoveBase -->
      <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <remap from="map" to="/ravg/map/rtabmap/proj_map"/>

        <rosparam file="$(find ravg)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find ravg)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find ravg)/config/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find ravg)/config/global_costmap_params.yaml" command="load" />
        <rosparam file="$(find ravg)/config/base_local_planner_params.yaml" command="load" />
      </node>
    </group>
  </group> <!-- end of namespace ravg -->
</launch>